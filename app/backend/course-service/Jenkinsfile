pipeline {
    agent {
        label 'custom-agents'
    }

    environment {
        AWS_REGION = 'sa-east-1'
        EKS_CLUSTER_NAME = 'backend-dev-clusters'
        DOCKER_REGISTRY = '544109289060.dkr.ecr.sa-east-1.amazonaws.com'
        IMAGE_NAME = 'cloudblitz/course-services'
        KUBE_NAMESPACE = 'cloudblitz'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }

        stage('Setup Java') {
            steps {
                echo 'Setting up Java 17...'
                sh '''
                    if command -v java >/dev/null 2>&1; then
                        JAVA_VERSION=$(java -version 2>&1 | head -n 1 | cut -d'"' -f2 | cut -d'.' -f1)
                        echo "Current Java version: $JAVA_VERSION"

                        if [ "$JAVA_VERSION" -ge 17 ]; then
                            echo "Java 17+ already available"
                            export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
                        else
                            echo "Downloading and installing OpenJDK 17 manually..."
                            wget -O openjdk-17.tar.gz https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz
                            mkdir -p ~/java
                            tar -xzf openjdk-17.tar.gz -C ~/java
                            export JAVA_HOME=~/java/jdk-17.0.2
                            export PATH=$JAVA_HOME/bin:$PATH
                            rm openjdk-17.tar.gz
                        fi
                    else
                        echo "Downloading and installing OpenJDK 17 manually..."
                        wget -O openjdk-17.tar.gz https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz
                        mkdir -p ~/java
                        tar -xzf openjdk-17.tar.gz -C ~/java
                        export JAVA_HOME=~/java/jdk-17.0.2
                        export PATH=$JAVA_HOME/bin:$PATH
                        rm openjdk-17.tar.gz
                    fi

                    echo "JAVA_HOME: $JAVA_HOME"
                    java -version
                '''
            }
        }

        stage('Build Application') {
            steps {
                echo 'Building Spring Boot application...'
                sh '''
                    cd app/backend/enrollment-service
                    chmod +x mvnw
                    ./mvnw clean package
                '''
            }
        }

        stage('Build Docker Image') {
            agent {
                label 'master'
            }
            steps {
                echo 'Building Docker image on master host...'
                script {
                    def imageTag = "${env.BUILD_NUMBER}"
                    def fullImageName = "${DOCKER_REGISTRY}/${IMAGE_NAME}:${imageTag}"

                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}

                        # Ensure ECR repo exists
                        aws ecr describe-repositories --repository-names ${IMAGE_NAME} --region ${AWS_REGION} || \
                        aws ecr create-repository --repository-name ${IMAGE_NAME} --region ${AWS_REGION}

                        cd app/backend/enrollment-service
                        docker build -t ${fullImageName} .
                        docker tag ${fullImageName} ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    """

                    env.DOCKER_IMAGE = fullImageName
                }
            }
        }

        stage('Push Docker Image') {
            agent {
                label 'master'
            }
            steps {
                echo 'Pushing Docker image to ECR registry...'
                sh """
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
                    docker push ${DOCKER_IMAGE}
                    docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    docker rmi ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                """
            }
        }

        stage('Deploy to EKS') {
            steps {
                echo 'Deploying to EKS cluster...'
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}
                            kubectl create namespace ${KUBE_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                            sed -i 's|image: cloudblitz/enrollment-service:latest|image: ${DOCKER_IMAGE}|g' app/backend/enrollment-service/k8s/deployment.yaml
                            kubectl apply -f app/backend/enrollment-service/k8s/
                            kubectl rollout status deployment/enrollment-service -n ${KUBE_NAMESPACE} --timeout=600s
                        """
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                echo 'Performing health check...'
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            kubectl get service enrollment-service -n ${KUBE_NAMESPACE}
                            kubectl wait --for=condition=ready pod -l app=enrollment-service -n ${KUBE_NAMESPACE} --timeout=600s
                            echo "Enrollment service deployment completed successfully!"
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            deleteDir()
        }
        success {
            echo 'Enrollment service deployment successful!'
        }
        failure {
            echo 'Enrollment service deployment failed!'
        }
    }
}
